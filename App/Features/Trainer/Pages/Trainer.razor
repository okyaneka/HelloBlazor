@page "/company"
@layout AuthLayout

@using System.Text.Json
@using HelloBlazor.App.Features.Trainer.Components
@using HelloBlazor.App.Features.Trainer.Models
@using HelloBlazor.App.Features.Trainer.Services

@inject ITrainerService service
@inject ISnackbar Snackbar

<PageTitle>Trainer</PageTitle>

<section class="ma-4 flex flex-column gap-4">
  <h1>Trainer</h1>

  @if (isLoading && items.Count() == 0)
  {
    <Loading />
  }
  else
  {
    <MudTable Items="@(items)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@isLoading"
      LoadingProgressColor="Color.Info">
      <HeaderContent>
        <MudTh>No</MudTh>
        <MudTh>Judul</MudTh>
        <MudTh>Perusahaan</MudTh>
        <MudTh>Jenis</MudTh>
        <MudTh></MudTh>
      </HeaderContent>
      <RowTemplate>
        <MudTd DataLabel="Nr">@(context.Index + 1 + startRow)</MudTd>
        <MudTd DataLabel="Title">@context.Item.Title</MudTd>
        <MudTd DataLabel="Company">@context.Item.Company.Name</MudTd>
        <MudTd DataLabel="Type">@context.Item.Type</MudTd>
        <MudTd DataLabel="Action"></MudTd>
      </RowTemplate>
    </MudTable>

    <MudPagination Class="mt-3" Color="Color.Primary" Count="pageCount" Selected="@(page)" SelectedChanged="GoToPage" />
  }
</section>

@code {
  class ItemWithIndex { public required TrainerItem Item; public int Index; }
  int page = 1;
  int pageSize = 2;
  int pageCount = 1;
  int startRow => (page - 1) * pageSize;
  List<TrainerItem> originalItems = new();
  bool isLoading = false;
  IEnumerable<ItemWithIndex> items => originalItems.Select((item, index) => new ItemWithIndex
  {
    Item = item,
    Index = index
  });

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
      await GetTrainerListAsync();
  }

  async Task GetTrainerListAsync()
  {
    try
    {
      isLoading = true;
      StateHasChanged();
      var res = await service.GetTrainerListAsync(GetParameters());
      originalItems = res.Data.List;
      page = res.Data.Page;
      pageCount = res.Data.TotalPage;
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error: {ex.Message}", Severity.Error);
    }
    finally
    {
      isLoading = false;
      StateHasChanged();
    }
  }

  async Task GoToPage(int pageNumber)
  {
    page = pageNumber;
    await GetTrainerListAsync();
  }

  object GetParameters()
  {
    return new
    {
      page = page,
      limit = pageSize
    };
  }
}